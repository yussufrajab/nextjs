
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  username: 'username',
  password: 'password',
  role: 'role',
  active: 'active',
  employeeId: 'employeeId',
  institutionId: 'institutionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InstitutionScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.EmployeeScalarFieldEnum = {
  id: 'id',
  employeeEntityId: 'employeeEntityId',
  name: 'name',
  gender: 'gender',
  profileImageUrl: 'profileImageUrl',
  dateOfBirth: 'dateOfBirth',
  placeOfBirth: 'placeOfBirth',
  region: 'region',
  countryOfBirth: 'countryOfBirth',
  zanId: 'zanId',
  phoneNumber: 'phoneNumber',
  contactAddress: 'contactAddress',
  zssfNumber: 'zssfNumber',
  payrollNumber: 'payrollNumber',
  cadre: 'cadre',
  salaryScale: 'salaryScale',
  ministry: 'ministry',
  department: 'department',
  appointmentType: 'appointmentType',
  contractType: 'contractType',
  recentTitleDate: 'recentTitleDate',
  currentReportingOffice: 'currentReportingOffice',
  currentWorkplace: 'currentWorkplace',
  employmentDate: 'employmentDate',
  confirmationDate: 'confirmationDate',
  retirementDate: 'retirementDate',
  status: 'status',
  ardhilHaliUrl: 'ardhilHaliUrl',
  confirmationLetterUrl: 'confirmationLetterUrl',
  jobContractUrl: 'jobContractUrl',
  birthCertificateUrl: 'birthCertificateUrl',
  institutionId: 'institutionId'
};

exports.Prisma.EmployeeCertificateScalarFieldEnum = {
  id: 'id',
  type: 'type',
  name: 'name',
  url: 'url',
  employeeId: 'employeeId'
};

exports.Prisma.ConfirmationRequestScalarFieldEnum = {
  id: 'id',
  status: 'status',
  reviewStage: 'reviewStage',
  documents: 'documents',
  rejectionReason: 'rejectionReason',
  employeeId: 'employeeId',
  submittedById: 'submittedById',
  reviewedById: 'reviewedById',
  decisionDate: 'decisionDate',
  commissionDecisionDate: 'commissionDecisionDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PromotionRequestScalarFieldEnum = {
  id: 'id',
  status: 'status',
  reviewStage: 'reviewStage',
  proposedCadre: 'proposedCadre',
  promotionType: 'promotionType',
  studiedOutsideCountry: 'studiedOutsideCountry',
  documents: 'documents',
  rejectionReason: 'rejectionReason',
  employeeId: 'employeeId',
  submittedById: 'submittedById',
  reviewedById: 'reviewedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  commissionDecisionReason: 'commissionDecisionReason'
};

exports.Prisma.LwopRequestScalarFieldEnum = {
  id: 'id',
  status: 'status',
  reviewStage: 'reviewStage',
  duration: 'duration',
  reason: 'reason',
  documents: 'documents',
  rejectionReason: 'rejectionReason',
  employeeId: 'employeeId',
  submittedById: 'submittedById',
  reviewedById: 'reviewedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  endDate: 'endDate',
  startDate: 'startDate'
};

exports.Prisma.CadreChangeRequestScalarFieldEnum = {
  id: 'id',
  status: 'status',
  reviewStage: 'reviewStage',
  newCadre: 'newCadre',
  reason: 'reason',
  studiedOutsideCountry: 'studiedOutsideCountry',
  documents: 'documents',
  rejectionReason: 'rejectionReason',
  employeeId: 'employeeId',
  submittedById: 'submittedById',
  reviewedById: 'reviewedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RetirementRequestScalarFieldEnum = {
  id: 'id',
  status: 'status',
  reviewStage: 'reviewStage',
  retirementType: 'retirementType',
  illnessDescription: 'illnessDescription',
  proposedDate: 'proposedDate',
  delayReason: 'delayReason',
  documents: 'documents',
  rejectionReason: 'rejectionReason',
  employeeId: 'employeeId',
  submittedById: 'submittedById',
  reviewedById: 'reviewedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ResignationRequestScalarFieldEnum = {
  id: 'id',
  status: 'status',
  reviewStage: 'reviewStage',
  effectiveDate: 'effectiveDate',
  reason: 'reason',
  documents: 'documents',
  rejectionReason: 'rejectionReason',
  employeeId: 'employeeId',
  submittedById: 'submittedById',
  reviewedById: 'reviewedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServiceExtensionRequestScalarFieldEnum = {
  id: 'id',
  status: 'status',
  reviewStage: 'reviewStage',
  currentRetirementDate: 'currentRetirementDate',
  requestedExtensionPeriod: 'requestedExtensionPeriod',
  justification: 'justification',
  documents: 'documents',
  rejectionReason: 'rejectionReason',
  employeeId: 'employeeId',
  submittedById: 'submittedById',
  reviewedById: 'reviewedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SeparationRequestScalarFieldEnum = {
  id: 'id',
  type: 'type',
  status: 'status',
  reviewStage: 'reviewStage',
  reason: 'reason',
  documents: 'documents',
  rejectionReason: 'rejectionReason',
  employeeId: 'employeeId',
  submittedById: 'submittedById',
  reviewedById: 'reviewedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ComplaintScalarFieldEnum = {
  id: 'id',
  complaintType: 'complaintType',
  subject: 'subject',
  details: 'details',
  complainantPhoneNumber: 'complainantPhoneNumber',
  nextOfKinPhoneNumber: 'nextOfKinPhoneNumber',
  attachments: 'attachments',
  status: 'status',
  reviewStage: 'reviewStage',
  officerComments: 'officerComments',
  internalNotes: 'internalNotes',
  rejectionReason: 'rejectionReason',
  complainantId: 'complainantId',
  assignedOfficerRole: 'assignedOfficerRole',
  reviewedById: 'reviewedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  message: 'message',
  link: 'link',
  isRead: 'isRead',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  Institution: 'Institution',
  Employee: 'Employee',
  EmployeeCertificate: 'EmployeeCertificate',
  ConfirmationRequest: 'ConfirmationRequest',
  PromotionRequest: 'PromotionRequest',
  LwopRequest: 'LwopRequest',
  CadreChangeRequest: 'CadreChangeRequest',
  RetirementRequest: 'RetirementRequest',
  ResignationRequest: 'ResignationRequest',
  ServiceExtensionRequest: 'ServiceExtensionRequest',
  SeparationRequest: 'SeparationRequest',
  Complaint: 'Complaint',
  Notification: 'Notification'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
