generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String                    @id @default(cuid())
  name                       String
  username                   String                    @unique
  password                   String
  role                       String
  active                     Boolean                   @default(true)
  employeeId                 String?                   @unique
  institutionId              String
  createdAt                  DateTime                  @default(now())
  updatedAt                  DateTime                  @updatedAt
  reviewedCadreChanges       CadreChangeRequest[]      @relation("ReviewedCadreChanges")
  submittedCadreChanges      CadreChangeRequest[]      @relation("SubmittedCadreChanges")
  complaints                 Complaint[]               @relation("ComplainantUser")
  reviewedComplaints         Complaint[]               @relation("ReviewedComplaints")
  reviewedConfirmations      ConfirmationRequest[]     @relation("ReviewedConfirmations")
  submittedConfirmations     ConfirmationRequest[]     @relation("SubmittedConfirmations")
  reviewedLWOPs              LwopRequest[]             @relation("ReviewedLWOPs")
  submittedLWOPs             LwopRequest[]             @relation("SubmittedLWOPs")
  notifications              Notification[]            @relation("Recipient")
  reviewedPromotions         PromotionRequest[]        @relation("ReviewedPromotions")
  submittedPromotions        PromotionRequest[]        @relation("SubmittedPromotions")
  reviewedResignations       ResignationRequest[]      @relation("ReviewedResignations")
  submittedResignations      ResignationRequest[]      @relation("SubmittedResignations")
  reviewedRetirements        RetirementRequest[]       @relation("ReviewedRetirements")
  submittedRetirements       RetirementRequest[]       @relation("SubmittedRetirements")
  reviewedSeparations        SeparationRequest[]       @relation("ReviewedSeparations")
  submittedSeparations       SeparationRequest[]       @relation("SubmittedSeparations")
  reviewedServiceExtensions  ServiceExtensionRequest[] @relation("ReviewedServiceExtensions")
  submittedServiceExtensions ServiceExtensionRequest[] @relation("SubmittedServiceExtensions")
  employee                   Employee?                 @relation(fields: [employeeId], references: [id])
  institution                Institution               @relation(fields: [institutionId], references: [id])
}

model Institution {
  id        String     @id @default(cuid())
  name      String     @unique
  employees Employee[]
  users     User[]
}

model Employee {
  id                       String                    @id @default(cuid())
  employeeEntityId         String?
  name                     String
  gender                   String
  profileImageUrl          String?
  dateOfBirth              DateTime?
  placeOfBirth             String?
  region                   String?
  countryOfBirth           String?
  zanId                    String                    @unique
  phoneNumber              String?
  contactAddress           String?
  zssfNumber               String?
  payrollNumber            String?
  cadre                    String?
  salaryScale              String?
  ministry                 String?
  department               String?
  appointmentType          String?
  contractType             String?
  recentTitleDate          DateTime?
  currentReportingOffice   String?
  currentWorkplace         String?
  employmentDate           DateTime?
  confirmationDate         DateTime?
  retirementDate           DateTime?
  status                   String?
  ardhilHaliUrl            String?
  confirmationLetterUrl    String?
  jobContractUrl           String?
  birthCertificateUrl      String?
  institutionId            String
  cadreChangeRequests      CadreChangeRequest[]
  confirmationRequests     ConfirmationRequest[]
  institution              Institution               @relation(fields: [institutionId], references: [id])
  certificates             EmployeeCertificate[]
  lwopRequests             LwopRequest[]
  promotionRequests        PromotionRequest[]
  resignationRequests      ResignationRequest[]
  retirementRequests       RetirementRequest[]
  separationRequests       SeparationRequest[]
  serviceExtensionRequests ServiceExtensionRequest[]
  user                     User?
}

model EmployeeCertificate {
  id         String   @id @default(cuid())
  type       String
  name       String
  url        String?
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model ConfirmationRequest {
  id                     String    @id @default(cuid())
  status                 String
  reviewStage            String
  documents              String[]
  rejectionReason        String?
  employeeId             String
  submittedById          String
  reviewedById           String?
  decisionDate           DateTime?
  commissionDecisionDate DateTime?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  employee               Employee  @relation(fields: [employeeId], references: [id])
  reviewedBy             User?     @relation("ReviewedConfirmations", fields: [reviewedById], references: [id])
  submittedBy            User      @relation("SubmittedConfirmations", fields: [submittedById], references: [id])
}

model PromotionRequest {
  id                       String   @id @default(cuid())
  status                   String
  reviewStage              String
  proposedCadre            String
  promotionType            String
  studiedOutsideCountry    Boolean?
  documents                String[]
  rejectionReason          String?
  employeeId               String
  submittedById            String
  reviewedById             String?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  commissionDecisionReason String?
  employee                 Employee @relation(fields: [employeeId], references: [id])
  reviewedBy               User?    @relation("ReviewedPromotions", fields: [reviewedById], references: [id])
  submittedBy              User     @relation("SubmittedPromotions", fields: [submittedById], references: [id])
}

model LwopRequest {
  id              String    @id @default(cuid())
  status          String
  reviewStage     String
  duration        String
  reason          String
  documents       String[]
  rejectionReason String?
  employeeId      String
  submittedById   String
  reviewedById    String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  endDate         DateTime?
  startDate       DateTime?
  employee        Employee  @relation(fields: [employeeId], references: [id])
  reviewedBy      User?     @relation("ReviewedLWOPs", fields: [reviewedById], references: [id])
  submittedBy     User      @relation("SubmittedLWOPs", fields: [submittedById], references: [id])
}

model CadreChangeRequest {
  id                    String   @id @default(cuid())
  status                String
  reviewStage           String
  newCadre              String
  reason                String?
  studiedOutsideCountry Boolean?
  documents             String[]
  rejectionReason       String?
  employeeId            String
  submittedById         String
  reviewedById          String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  employee              Employee @relation(fields: [employeeId], references: [id])
  reviewedBy            User?    @relation("ReviewedCadreChanges", fields: [reviewedById], references: [id])
  submittedBy           User     @relation("SubmittedCadreChanges", fields: [submittedById], references: [id])
}

model RetirementRequest {
  id                 String   @id @default(cuid())
  status             String
  reviewStage        String
  retirementType     String
  illnessDescription String?
  proposedDate       DateTime
  delayReason        String?
  documents          String[]
  rejectionReason    String?
  employeeId         String
  submittedById      String
  reviewedById       String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  employee           Employee @relation(fields: [employeeId], references: [id])
  reviewedBy         User?    @relation("ReviewedRetirements", fields: [reviewedById], references: [id])
  submittedBy        User     @relation("SubmittedRetirements", fields: [submittedById], references: [id])
}

model ResignationRequest {
  id              String   @id @default(cuid())
  status          String
  reviewStage     String
  effectiveDate   DateTime
  reason          String?
  documents       String[]
  rejectionReason String?
  employeeId      String
  submittedById   String
  reviewedById    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  employee        Employee @relation(fields: [employeeId], references: [id])
  reviewedBy      User?    @relation("ReviewedResignations", fields: [reviewedById], references: [id])
  submittedBy     User     @relation("SubmittedResignations", fields: [submittedById], references: [id])
}

model ServiceExtensionRequest {
  id                       String   @id @default(cuid())
  status                   String
  reviewStage              String
  currentRetirementDate    DateTime
  requestedExtensionPeriod String
  justification            String
  documents                String[]
  rejectionReason          String?
  employeeId               String
  submittedById            String
  reviewedById             String?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  employee                 Employee @relation(fields: [employeeId], references: [id])
  reviewedBy               User?    @relation("ReviewedServiceExtensions", fields: [reviewedById], references: [id])
  submittedBy              User     @relation("SubmittedServiceExtensions", fields: [submittedById], references: [id])
}

model SeparationRequest {
  id              String   @id @default(cuid())
  type            String
  status          String
  reviewStage     String
  reason          String
  documents       String[]
  rejectionReason String?
  employeeId      String
  submittedById   String
  reviewedById    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  employee        Employee @relation(fields: [employeeId], references: [id])
  reviewedBy      User?    @relation("ReviewedSeparations", fields: [reviewedById], references: [id])
  submittedBy     User     @relation("SubmittedSeparations", fields: [submittedById], references: [id])
}

model Complaint {
  id                     String   @id @default(cuid())
  complaintType          String
  subject                String
  details                String
  complainantPhoneNumber String
  nextOfKinPhoneNumber   String
  attachments            String[]
  status                 String
  reviewStage            String
  officerComments        String?
  internalNotes          String?
  rejectionReason        String?
  complainantId          String
  assignedOfficerRole    String
  reviewedById           String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  complainant            User     @relation("ComplainantUser", fields: [complainantId], references: [id])
  reviewedBy             User?    @relation("ReviewedComplaints", fields: [reviewedById], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  message   String
  link      String?
  isRead    Boolean  @default(false)
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation("Recipient", fields: [userId], references: [id], onDelete: Cascade)
}
